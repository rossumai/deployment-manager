{
  "id": 645889,
  "type": "function",
  "name": "Download PO BB into Schema (S2K PO)",
  "url": "https://us.api.rossum.ai/v1/hooks/645889",
  "description": "",
  "settings": {},
  "active": true,
  "events": [
    "annotation_content.initialize"
  ],
  "queues": [
    "https://us.api.rossum.ai/v1/queues/1771791"
  ],
  "run_after": [],
  "metadata": {},
  "config": {
    "schedule": {
      "cron": ""
    },
    "app": null,
    "payload_logging_enabled": false,
    "timeout_s": 30,
    "max_polling_time_s": 300,
    "retry_count": 4,
    "retry_after_polling_failure": true,
    "runtime": "python3.12",
    "code": "\"\"\"\nThis custom serverless function example demonstrates showing messages to the\nuser on the validation screen, updating values of specific fields, and\nexecuting actions on the annotation.\n\nSee https://elis.rossum.ai/api/docs/#rossum-transaction-scripts for more examples.\n\"\"\"\n\nfrom txscript import TxScript, default_to, substitute, is_empty\nfrom rossum.lib.api_client import RossumClient, RossumException\n\ndef rossum_hook_request_handler(payload: dict) -> dict:\n    rossum_client = get_rossum_client(payload)\n\n    metadata = payload['annotation'].get('metadata', {})\n    content = payload['annotation']['content']\n \n    operations = []\n    for schema_id, field_data in metadata.get('bounding_boxes', {}).items():\n        try:\n            datapoint = find_by_schema_id(content, schema_id)[0]\n            operation = create_replace_operation(datapoint, field_data['content'], field_data['validation_sources'])\n            operations.append(operation)\n        except Exception as e:\n            print(f'Could not find schema_id {schema_id} in annotation, skipping patching its bounding box.')\n\n    return {\"messages\": [], \"operations\": operations}\n    \ndef get_rossum_client(payload: dict) -> RossumClient:\n    rossum_client = RossumClient(None, payload[\"base_url\"] + \"/api/v1\")\n    rossum_client.token = get_auth_token_from_payload(payload)\n    return rossum_client\n\n\ndef get_auth_token_from_payload(payload: dict) -> str:\n    auth_token = payload.get(\"rossum_authorization_token\")\n    if not auth_token:\n        raise HookConfigurationError(\n            f\"Authorization token not found in the payload. Configure Rossum API access at {payload['hook']}.\"\n        )\n    return auth_token\n    \n    \ndef create_replace_operation(datapoint: dict, content: dict, validation_sources: list):\n    return {\n        \"op\": \"replace\",\n        \"id\": datapoint['id'],\n        \"value\": {\n            \"content\": content,\n            \"validation_sources\": validation_sources\n        },\n    }\n    \ndef find_by_schema_id(content, schema_id: str):\n    accumulator = []\n    for node in content:\n        if node[\"schema_id\"] == schema_id:\n            accumulator.append(node)\n        elif \"children\" in node:\n            accumulator.extend(find_by_schema_id(node[\"children\"], schema_id))\n\n    return accumulator",
    "third_party_library_pack": "default",
    "memory_size_mb": 256
  },
  "test": {},
  "sideload": [
    "schemas"
  ],
  "settings_schema": null,
  "secrets_schema": {
    "type": "object",
    "additionalProperties": {
      "type": "string"
    }
  },
  "token_owner": "https://us.api.rossum.ai/v1/users/383208",
  "extension_source": "custom",
  "guide": null,
  "read_more_url": null,
  "extension_image_url": null,
  "token_lifetime_s": null,
  "hook_template": null,
  "created_by": null,
  "created_at": null,
  "modified_by": "https://us.api.rossum.ai/v1/users/354857",
  "modified_at": "2025-01-20T12:35:16.778308Z"
}