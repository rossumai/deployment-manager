{
  "id": 710658,
  "type": "function",
  "name": "Record Updating User (NON-S2K)",
  "url": "https://us.api.rossum.ai/v1/hooks/710658",
  "description": "",
  "settings": {
    "ignored_user_ids": [
      383208
    ]
  },
  "active": false,
  "events": [
    "annotation_content.updated"
  ],
  "queues": [
    "https://us.api.rossum.ai/v1/queues/1733087"
  ],
  "run_after": [],
  "metadata": {},
  "config": {
    "schedule": {
      "cron": ""
    },
    "app": null,
    "payload_logging_enabled": false,
    "timeout_s": 30,
    "max_polling_time_s": 300,
    "retry_count": 4,
    "retry_after_polling_failure": true,
    "runtime": "python3.12",
    "code": "\"\"\"\nThis custom serverless function example demonstrates showing messages to the\nuser on the validation screen, updating values of specific fields, and\nexecuting actions on the annotation.\n\nSee https://elis.rossum.ai/api/docs/#rossum-transaction-scripts for more examples.\n\"\"\"\nfrom rossum.lib.api_client import RossumClient\nfrom txscript import TxScript, default_to, substitute\n\ndef rossum_hook_request_handler(payload: dict) -> dict:\n    t = TxScript.from_payload(payload)\n    annotation_content = payload['annotation']['content']\n    client = get_rossum_client(payload)\n    ignored_user_ids = payload.get('settings', {}).get('ignored_user_ids', [])\n    \n    modified_by_url = payload['annotation']['modified_by']\n    modified_by_id = modified_by_url.split('/')[-1]\n    \n    print(modified_by_url)\n    print(modified_by_id)\n    \n    if modified_by_id in ignored_user_ids:\n        return t.hook_response()\n        \n    try:\n        user = client.get_user(modified_by_id)\n    except RossumException as e:\n        return t.hook_response()\n    \n    response =  t.hook_response()\n    \n    for datapoint_id in payload['updated_datapoints']:\n        # datapoint = find_by_datapoint_id(annotation_content, datapoint_id)\n        parent_datapoints = find_parent_by_datapoint_id(annotation_content, datapoint_id)\n        \n        # Ignore non-line items\n        if not len(parent_datapoints) or parent_datapoints[0]['schema_id'] != 'gl_codes_tuple':\n            continue\n        \n\n        email_schema_id = find_by_schema_id(parent_datapoints, 'item_last_modified_by_email')[0]\n        op = create_replace_operation(email_schema_id, user.get('email', modified_by_url))\n        response['operations'].append(op)\n        \n        # TODO: check if  human-touched datapoint?\n        \n    \n    return response\n    \n    \ndef find_by_datapoint_id(content, datapoint_id: str):\n    accumulator = []\n    for node in content:\n        if node[\"id\"] == datapoint_id:\n            accumulator.append(node)\n        elif \"children\" in node:\n            accumulator.extend(find_by_datapoint_id(node[\"children\"], datapoint_id))\n\n    return accumulator\n    \ndef find_parent_by_datapoint_id(content, datapoint_id: str, parent = None):\n    accumulator = []\n    for node in content:\n        if node[\"id\"] == datapoint_id:\n            accumulator.append(parent)\n        elif \"children\" in node:\n            accumulator.extend(find_parent_by_datapoint_id(node[\"children\"], datapoint_id, node))\n\n    return accumulator\n    \ndef find_by_schema_id(content, schema_id: str):\n    accumulator = []\n    for node in content:\n        if node[\"schema_id\"] == schema_id:\n            accumulator.append(node)\n        elif \"children\" in node:\n            accumulator.extend(find_by_schema_id(node[\"children\"], schema_id))\n\n    return accumulator\n    \n    \ndef create_replace_operation(datapoint, new_value):\n    \"\"\"\n    Create and operation to replace the value of the datapoint with a new value.\n    :param datapoint: content of the datapoint\n    :param new_value: new value of the datapoint\n    :return: dict with replace operation definition (see https://api.elis.rossum.ai/docs/#annotation-content-event-response-format)\n    \"\"\"\n    return {\n        \"op\": \"replace\",\n        \"id\": datapoint[\"id\"],\n        \"value\": {\n            \"content\": {\n                \"value\": new_value,\n            }\n        },\n    }\n    \ndef get_rossum_client(payload: dict) -> RossumClient:\n    rossum_client = RossumClient(None, payload[\"base_url\"] + \"/api/v1\")\n    rossum_client.token = get_auth_token_from_payload(payload)\n    return rossum_client\n\n\ndef get_auth_token_from_payload(payload: dict) -> str:\n    auth_token = payload.get(\"rossum_authorization_token\")\n    if not auth_token:\n        raise Exception(\n            f\"Authorization token not found in the payload. Configure Rossum API access at {payload['hook']}.\"\n        )\n    return auth_token",
    "third_party_library_pack": "default",
    "memory_size_mb": 256
  },
  "test": {},
  "sideload": [
    "schemas"
  ],
  "settings_schema": null,
  "secrets_schema": {
    "type": "object",
    "additionalProperties": {
      "type": "string"
    }
  },
  "token_owner": "https://us.api.rossum.ai/v1/users/383208",
  "extension_source": "custom",
  "guide": null,
  "read_more_url": null,
  "extension_image_url": null,
  "token_lifetime_s": null,
  "hook_template": null,
  "created_by": "https://us.api.rossum.ai/v1/users/354857",
  "created_at": "2025-03-19T15:37:45.077031Z",
  "modified_by": "https://us.api.rossum.ai/v1/users/354857",
  "modified_at": "2025-03-24T11:55:16.107750Z"
}