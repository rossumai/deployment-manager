You are an expert documentation writer for Rossum, an intelligent document processing platform. Your task is to document a specific "Document Routing" object based on its configuration.

**Important information**
Generate markdown documentation for the Rossum extension Document Sorting.
This DS is represented completely by this JSON, which I will insert later.
Do not output anything before I will add the JSON documentation (the example below is only for your information).

Return also list of related Extensions = hooks that are listed in ‘run_after’ attribute. Look at the IDs of the related extensions section to know which is which and list their name as well as ID.

**Background Information for Document Routing:**

The Document Routing extension in Rossum automates the process of directing incoming documents to the appropriate queues for further processing or validation. This is achieved through a set of user-defined rules that evaluate data extracted from the documents. By configuring Document Routing, organizations can significantly improve the efficiency of their document workflows, ensuring that documents reach the correct teams or processing stages without manual intervention.

**How Document Routing Works:**

When a document enters the Rossum platform, the Document Routing extension (if enabled and active) evaluates it against a list of rules. These rules are processed in a specific order. Each rule typically consists of a condition based on the values of specific data fields extracted from the document. If a document's data matches the condition of a rule, it is automatically routed to the designated destination queue.

A crucial aspect of Document Routing is the concept of "Stop Processing." If a rule has the "Stop Processing" flag enabled and its condition is met, the document will be routed to the specified queue, and no further routing rules will be evaluated for that document. If "Stop Processing" is disabled, even if a rule's condition is met, the system will continue to evaluate subsequent rules.

If a document does not match any of the defined routing rules, it will be routed to the designated "Default Queue."


Configuration Options for a Document Routing Object:
When documenting a specific Document Routing object, please explain the following configuration options and their implications. Refer to the anonymized example configuration provided above to understand how these options are used in a real-world scenario.
Name:


Description: This is the user-defined name of the Document Routing configuration.
LLM Guidance: Explain the purpose of having a name (e.g., for easy identification and management). In the example, the name is "(DEV) Document Sorting (PO / non-PO)", which clearly indicates its function.
Description (Optional):


Description: An optional field for providing more context or details about the purpose of this specific routing configuration.
LLM Guidance: Mention that this field can help users understand the specific use case of this routing setup. In the example, the description clarifies that it sorts documents based on type (PO/non-PO).
Rules Table: This table defines the individual routing rules. For each rule, document the following:


Key Observation from Example: Note that in this example, the rules are within the settings dictionary and are an array of dictionaries. The structure might vary slightly depending on the Rossum API version or extension type.
Condition (Represented by value and schema_id in the example):
Description: This specifies the condition that triggers the rule. In the example, it's represented by the value (e.g., "po", "non-po") associated with a field in the schema identified by schema_id ("ff_sorting").
LLM Guidance: Explain that this is the core of the routing logic. Highlight that these conditions rely on the data extraction configuration of the document type and might involve checking for specific values in designated fields. In the example, the condition checks if a field in the "ff_sorting" schema has the value "po" or "non-po".
Trigger Status (trigger_status in the example):
Description: This specifies the document status that must be active for the rule to be evaluated.
LLM Guidance: Explain that routing can be conditional on the current status of the document in the workflow (e.g., "confirmed", "to_review", "exported"). The example demonstrates routing based on different annotation statuses.
Destination Queue (target_queue in the example):
Description: This specifies the target queue (identified by its ID) where the document will be routed if the rule's condition and trigger status are met.
LLM Guidance: Explain that this is the queue where the document will be sent for further processing or validation. The example shows documents being routed to queues identified by [QUEUE_ID_1] and [QUEUE_ID_2].
Stop Processing (Implicit in this example):
LLM Guidance: While not explicitly a "Stop Processing" flag in this specific example's rule structure, explain that the behavior of stopping after the first matching rule might be implicit in how this type of Document Sorting extension works. In other types of Document Routing, there might be an explicit "Stop Processing" option.
Order (Implicit in this example):
LLM Guidance: Explain that the order of rules in the array usually matters. Rules are typically evaluated from top to bottom. The example shows a sequence of rules for different conditions and statuses.
Default Queue (Not explicitly present in the settings.rules of this example):


Description: This specifies the queue where documents will be routed if none of the defined rules are matched.
LLM Guidance: Explain the role of the default queue as a fallback mechanism. Note that in this specific example, a default queue isn't explicitly defined within the rules structure, but there might be a global default setting for this Document Sorting configuration or it might be handled differently.
Active:


Description: A boolean flag (True/False) indicating whether this Document Routing configuration is currently active and being applied to incoming documents.
LLM Guidance: Explain that setting this to "True" enables the routing logic, while "False" disables it. The example shows "active": true.
Events (events in the example):


Description: This lists the events that trigger this Document Routing configuration.
LLM Guidance: Explain that Document Routing can be triggered by specific events in the document lifecycle. The example shows it's triggered by annotation_status.changed.
Instructions for the LLM:
When provided with the configuration details of a specific Document Routing object, use this template to generate comprehensive documentation. For each configuration option, first state its name, then provide the description as defined above, and finally, use the "LLM Guidance" to elaborate on its purpose, functionality, and potential implications. Pay close attention to the structure of the rules within the settings section, as it might vary. Refer to the anonymized example configuration above. A good example of the expected output for the provided configuration would be:
Example Output (Based on the Anonymized Configuration):
This Document Sorting (likely functioning as Document Routing) configuration is designed to automatically route documents into different queues based on whether they are identified as "PO" (Purchase Order) or "non-PO" documents. It also takes into account the current status of the document within the Rossum workflow.
The routing is triggered when the annotation_status of a document changes.
Documents are classified as "po" or "non-po" based on a field within the ff_sorting schema.
When a document's annotation_status changes to confirmed and it's classified as "po", it's routed to queue [QUEUE_ID_1].
When a document's annotation_status changes to confirmed and it's classified as "non-po", it's routed to queue [QUEUE_ID_2].
"po" documents are also routed to queue [QUEUE_ID_1] when their status changes to to_review or exported.
"non-po" documents are also routed to queue [QUEUE_ID_2] when their status changes to exported.
The configuration is currently active.
Aim for a similar level of detail and clarity in your documentation.
Remember to maintain a clear, concise, and informative tone suitable for technical documentation.

JSON:
{attributes}



Related extensions:
{run_after}
